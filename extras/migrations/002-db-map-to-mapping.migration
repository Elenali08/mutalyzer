#!/usr/bin/env python

"""
Convert the old 'map' tables to the new 'Mapping' tables.

Usage:
  ./002-db-map-to-mapping.migration [migrate]

This is basically just a renaming of columns and
- use NULL for missing values
- add 1 to all chromosomal start positions.

The following tables on hg18 and hg19 are dropped:
- gbStatus
- map_cdsBackup
- refGene
- refLink

The map tables are renamed to map_backup.
"""


import sys
import MySQLdb


def _connect(db):
    try:
        connection = MySQLdb.connect(host='localhost',
                                     user='mutalyzer',
                                     passwd='',
                                     db=db)
    except MySQLdb.Error, e:
        print 'Error %d: %s' % (e.args[0], e.args[1])
        sys.exit(1)
    return connection


def _exon_starts(starts):
    updated = []
    for start in starts.split(',')[:-1]:
        updated.append(str(int(start) + 1))
    return ','.join(updated)


def _exon_stops(stops):
    if stops[-1] == ',':
        return stops[:-1]


def _check(db):
    # Todo: Also check if 'map' is gone.
    connection = _connect(db)
    cursor = connection.cursor()
    cursor.execute('SHOW TABLES LIKE "Mapping";')
    ok = len(cursor.fetchall()) > 0
    connection.close()
    return ok


def _migrate(db):
    connection = _connect(db)
    cursor = connection.cursor()
    cursor.execute("""
        CREATE TABLE Mapping (
            gene varchar(255) DEFAULT NULL,
            transcript varchar(20) NOT NULL DEFAULT '',
            version smallint(6) DEFAULT NULL,
            chromosome varchar(40) DEFAULT NULL,
            orientation char(1) DEFAULT NULL,
            start int(11) unsigned DEFAULT NULL,
            stop int(11) unsigned DEFAULT NULL,
            cds_start int(11) unsigned DEFAULT NULL,
            cds_stop int(11) unsigned DEFAULT NULL,
            exon_starts longblob NOT NULL,
            exon_stops longblob NOT NULL,
            protein varchar(20) DEFAULT NULL,
            source varchar(20) DEFAULT NULL,
            INDEX (transcript)
        );""")
    select_cursor = connection.cursor(MySQLdb.cursors.DictCursor)
    select_cursor.execute("""
        SELECT
            geneName as gene,
            acc as transcript,
            version as version,
            chrom as chromosome,
            strand as orientation,
            txStart + 1 as start,
            txEnd as stop,
            NULLIF(cdsStart + 1, cdsEnd + 1) as cds_start,
            NULLIF(cdsEnd, cdsStart) as cds_stop,
            exonStarts as exon_starts,
            exonEnds as exon_stops,
            NULLIF(protAcc, '') as protein,
            'UCSC' as source
        FROM
            map;""")
    count = 0
    while True:
        r = select_cursor.fetchone()
        if r == None:
            break
        count += 1
        cursor.execute("""
            INSERT INTO Mapping
                (gene, transcript, version, chromosome, orientation, start, stop,
                cds_start, cds_stop, exon_starts, exon_stops, protein, source)
            VALUES
                (%s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s);""",
            (r['gene'], r['transcript'], r['version'], r['chromosome'],
             r['orientation'], r['start'], r['stop'], r['cds_start'],
             r['cds_stop'], _exon_starts(r['exon_starts']), _exon_stops(r['exon_stops']),
             r['protein'], r['source']))

    print 'Converted table map to table Mapping on %s (%d entries)' % (db, count)

    cursor.execute('DROP TABLE IF EXISTS gbStatus, map_cdsBackup, refGene, refLink')
    cursor.execute('RENAME TABLE map TO map_backup')

    print 'Dropped tables gbStatus, map_cdsBackup, refGene, refLink on %s' % db
    print 'Renamed table map to map_backup on %s' % db

    select_cursor.close()
    cursor.close()
    connection.commit()
    connection.close()


def check():
    """
    Check if migration is needed.
    """
    hg18_ok = _check('hg18')
    hg19_ok = _check('hg19')
    if hg18_ok != hg19_ok:
        print 'Installation is not in a recognizable state. Fix manually.'
        sys.exit(1)
    return not hg18_ok


def migrate():
    """
    Perform migration.
    """
    _migrate('hg18')
    _migrate('hg19')


if __name__ == '__main__':
    needed = check()
    if needed:
        print 'This migration is needed.'
        if len(sys.argv) > 1 and sys.argv[1] == 'migrate':
            print 'Performing migration.'
            migrate()
            print 'Performed migration.'
    else:
        print 'This migration is not needed.'
