#!/usr/bin/env python
"""
Command-line interface to the nomenclature checker.

Usage:
  {command} variant

  variant: The variant description to check.


@todo: Refactor this file.
"""


import sys
import os
import html2text

from mutalyzer import variantchecker
from mutalyzer.output import Output
from mutalyzer.util import format_usage
from mutalyzer import describe

def main(cmd):
    """
    Command line interface to the name checker.

    @todo: documentation
    """
    O = Output(__file__)

    O.addMessage(__file__, -1, "INFO", "Received variant " + cmd)

    RD = variantchecker.check_variant(cmd, O)

    O.addMessage(__file__, -1, "INFO", "Finished processing variant " + cmd)

    ### OUTPUT BLOCK ###
    gn = O.getOutput("genename")
    if gn :
        print "Gene Name: " + gn[0]
    tv = O.getOutput("transcriptvariant")
    if tv :
        print "Transcript variant: " + tv[0]
        print
    #if

    for i in O.getMessages() :
        print i
    errors, warnings, summary = O.Summary()
    print summary
    print

    if not errors:
        print "Overview of the raw variants:"
        for i in O.getOutput("visualisation"):
            for j in range(len(i)):
                print i[j]
            print
        #for

        print "Genomic description:"
        print O.getIndexedOutput('genomicDescription', 0, '')

        print "\nChromosomal description:"
        print O.getOutput("genomicChromDescription")

        print "\nAffected transcripts:"
        for i in O.getOutput('descriptions'):
            print i
        print "\nAffected proteins:"
        for i in O.getOutput('protDescriptions'):
            print i

        print "\nOld protein:"
        print O.getIndexedOutput("oldProteinFancyText",0)

        print "\nNew protein:"
        print O.getIndexedOutput("newProteinFancyText",0)
        

        print "\nAlternative protein:"
        print O.getIndexedOutput("altProteinFancyText", 0)
          

        print "\nExon information:"
        for i in O.getOutput("exonInfo") :
            print i

        print "\nCDS  information:"
        print O.getOutput("cdsStart_c"), O.getOutput("cdsStop_c")
        print O.getOutput("cdsStart_g"), O.getOutput("cdsStop_g")

        print "\n Translation exceptions for old protein:"
        print ['Position (p.)', 'Position (c.)', 'Position (g.)','Triplet','Original amino acid','Substituted amino acid']
        for i in O.getOutput('reference_exceptions'):
            print i

        print "\n Translation exceptions for new (alternative) protein:"
        print ['Position (p.)', 'Position (c.)', 'Position (g.)','Triplet','Original amino acid','Substituted amino acid']
        for i in O.getOutput('predicted_exceptions'):
            print i
        print "\nEffect on Restriction sites:"
        for i in O.getOutput("restrictionSites") :
            print i

        print "\nLegend:"
        for i in O.getOutput("legends") :
            print i

        allele = describe.describe(O.getIndexedOutput("original", 0),
            O.getIndexedOutput("mutated", 0))
        prot_allele = describe.describe(O.getIndexedOutput("oldprotein", 0),
            O.getIndexedOutput("newprotein", 0, default=""), DNA=False)

        extracted = extractedProt = '(skipped)'

        if allele:
            extracted = describe.alleleDescription(allele)
        if prot_allele:
            extractedProt = describe.alleleDescription(prot_allele)

        print "\nExperimental services:"
        print extracted
        print extractedProt
        #print "+++ %s" % O.getOutput("myTranscriptDescription")

    #if
    ### OUTPUT BLOCK ###
    del O
#main


if __name__ == '__main__':

    if len(sys.argv) < 2:
        print format_usage()
        sys.exit(1)

    main(sys.argv[1])
