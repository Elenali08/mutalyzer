#!/usr/bin/env python
"""
Daemon for processing scheduled batch jobs.

The process can be shutdown gracefully by sending a SIGINT (Ctrl+C) or SIGTERM
signal.

@todo: Get rid of ugly exception logging.
@todo: Reload configuration without restarting (for example, on SIGHUP).
"""


import signal
import sys
import time
import traceback

from mutalyzer import config
from mutalyzer.Db import Batch, Counter
from mutalyzer.Scheduler import Scheduler


def daemonize():
    """
    Run forever in a loop processing scheduled batch jobs.
    """
    database = Batch()
    counter = Counter()
    scheduler = Scheduler(database)

    def handle_exit(signum, stack_frame):
        if scheduler.stopped():
            sys.stderr.write('mutalyzer-batchd: Terminated\n')
            sys.exit(1)
        if signum == signal.SIGINT:
            sys.stderr.write('mutalyzer-batchd: Hitting Ctrl+C again will terminate any running job!\n')
        scheduler.stop()

    signal.signal(signal.SIGTERM, handle_exit)
    signal.signal(signal.SIGINT, handle_exit)

    while not scheduler.stopped():
        # Process batch jobs. This process() method runs while there
        # exist jobs to run.
        try:
            scheduler.process(counter)
        except Exception as e:
            f = open('/tmp/batcherror.log', 'a+')
            f.write('Error (%s): %s\n' % (type(e), str(e)))
            f.write('%s\n\n' % repr(traceback.format_exc()))
            f.flush()
            f.close()
        if scheduler.stopped():
            break
        # Wait a bit and process any possible new jobs.
        time.sleep(1)

    sys.stderr.write('mutalyzer-batchd: Graceful shutdown\n')
    sys.exit(0)


if __name__ == '__main__':
    daemonize()
