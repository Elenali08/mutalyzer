Coding style guide:

* Follow PEP 8 (code) and PEP 257 (docstrings).
    http://www.python.org/dev/peps/pep-0008/
    http://www.python.org/dev/peps/pep-0257/
* Use Epydoc style documentation in docstrings.
* Use __all__ definitions in modules.
* Executables are in the bin/ directory, e.g. like this:
    #!/usr/bin/env python
    from mutalyzer import batch_runner
    batch_runner.run()
* For examples, check established Python projects:
    http://code.djangoproject.com/browser/django/trunk
    http://twistedmatrix.com/trac/browser/trunk
    https://github.com/webpy/webpy
    https://github.com/mitsuhiko/jinja2
    https://bitbucket.org/mramm/tg-21/src
    http://bazaar.launchpad.net/~bzr-pqm/bzr/bzr.dev/files
    https://github.com/ask/celery


Todo:

* https://www.mutalyzer.nl/projects/mutalyzer2/changeset?old_path=%2Ftrunk&old=228&new_path=%2Fbranches%2Fexon-deletions-branch&new=228#file5
* Accept a --config command line argument for a configuration file location.
* Document integration, deployment, release management, etc.
* Use standard logging module, with rotating functionality. Race conditions
  on the log file are probably a problem in the current setup.
  Instead of that rotating, we could also use logrotate:
  http://serverfault.com/questions/55610/logrotate-and-open-files
* Use environment variable for testing situation. Something like:
  http://webpy.org/cookbook/testing_with_paste_and_nose
  For example, we probably want to disable logging during the test run.
* Setup continuous integration. Currently, I'm most impressed with Hudson.
  http://hudson-ci.org/
  http://www.rhonabwy.com/wp/2009/11/04/setting-up-a-python-ci-server-with-hudson/
* Create an installation script, and from that preferably a Debian package.
  Non-trivial thing here would be the requirement of database contents.
  http://www.siafoo.net/article/77
  http://ghantoos.org/2008/10/19/creating-a-deb-package-from-a-python-setuppy/
  http://packages.python.org/distribute/setuptools.html#developer-s-guide
  https://wiki.ubuntu.com/PackagingGuide/Python#The debhelper way
  http://stackoverflow.com/questions/4981174/migrating-to-pipvirtualenv-from-setuptools
  http://peak.telecommunity.com/DevCenter/setuptools
* Make the batch checker a real system service, using /var/run and a Upstart
  init script.
  http://wiki.debian.org/LSBInitScripts
  http://celeryproject.org/docs/cookbook/daemonizing.html
  http://www.debian-administration.org/articles/28
* Migrate Javascript to JQuery.
* I think in the long run, the Output object is not really the way to go. It
  obscures the control flow. The logging part should use the standard logging
  module. The data gathering by the Output object is probably better handled
  by explicitely returning data objects from functions.
* Migrate from TAL to a more mondern and maintained Python template library.
* Develop a large test suite.
* Create a web interface url to watch the progress of a batch job.
* Use virtualenv?


Notes for server setup (Europium VM copy):

- Hostname aanpassen.
- Mailserver.
- Batch checker stoppen.


Obsoleted features:

  On eu.liacs.nl: /etc/apache2/mods-enabled/rewrite.load
  - This file contains a rewrite rule that converts "Variant_info.php" to
    "Variant_info".
  - When all LOVD versions are above 2.0-23, this rule can be deleted and
    the rewrite module can be disabled.

  index.py:
  - In the Variant_info() function a substitution on error messages is
    performed.
  - When all LOVD versions are above 2.0-23, this check can be deleted.
